<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converter="clr-namespace:Jg.wpf.controls.Converter"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Expander.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <Style
        x:Key="DraggingMode.ToggleButton"
        BasedOn="{StaticResource MaterialDesignActionToggleButton}"
        TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="#FFDEDEDE" />
        <Setter Property="Opacity" Value="0.5" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="IsEnabled" Value="True" />
        <Setter Property="ToolTip" Value="{converter:Localization Name=EnterDragMode}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon
                        Width="30"
                        Height="30"
                        Foreground="#DEDEDE"
                        Kind="SortVariantLock" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="materialDesign:ToggleButtonAssist.OnContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon
                        Width="30"
                        Height="30"
                        Foreground="#DEDEDE"
                        Kind="Sort" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Opacity" Value="1" />
                <Setter Property="ToolTip" Value="{converter:Localization Name=LeaveDragMode}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="Jg.HorizontalHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" 
                            CornerRadius="0"
                            Padding="{Binding Path=(materialDesign:ExpanderAssist.HorizontalHeaderPadding) , RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="16"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <ToggleButton x:Name="ExpanderButton"
                                          Grid.Column="0"
                                          VerticalAlignment="Center"
                                          RenderTransformOrigin="0.5 0.5"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignExpanderToggleButton}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Up">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <ContentPresenter Grid.Column="2"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Foreground" Value="{Binding Foreground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=ToggleButton}}" />
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource MouseOverItemBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>